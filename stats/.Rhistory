cfn[2,9]
cfn[2,8]
cfn[2,7]
cfn[2,5]
cfn[2,6]
sub('^(-)?0[.]', '\\1.', format(round(cfn[2,8],2),nsmall=2))
summary(cfn)
summary(full)
cfin <- drop1(final, test = "Chisq")
cfin
cfin[2,1]
cfin[2,3]
boot.resko
summary(final$model.result)$coefficients
final$model.result
summary(final)
str(final)
round(summary(final$model.result)$coefficients[1,1], 2)
str(final)
summary(final)$coefficients
summary(sound)$coefficients[1,1]
summary(sound)
summary(sound)$coefficients[1,1]
summary(sound)$coefficients[2,1]
summary(sound)$coefficients[2,4]
boot.resko$ci.estimates
boot.resko$ci.estimates[1,2]
boot.resko$ci.estimates[2,2]
cint
cfin
summary(final)
summary(sound)$coefficients
summary(sound)$coefficients[4,1]
load("natref.RData")
kdata$age=difftime(
(as.Date(paste(kdata$year, kdata$month,kdata$day, sep="-"))),
(as.Date(paste(kdata$byear, kdata$bmonth,kdata$bday, sep="-"))),
units=c("days"))
kdata$age=as.numeric(kdata$age)
#### age overview for children
child_age <- kdata %>%
filter(trial == "1") %>%
group_by(agegroup,condition) %>%
summarise(mage = mean(age)/30.42,
lrange = range(age)[1]/30.42,
urange = range(age)[2]/30.42) %>%
mutate_if(is.numeric, round, 2)
boot.resko$ci.estimates
o <-bind_cols(e3m,ft)%>%
select(agegroup, condition,estimate,lci,uci,std.error,statistic,p.value,t1_success,t1_p) %>%
knitr::kable(digits = 2, align = "c", caption = "Details for models and trial 1 performance")
o
a24=child_age <- kdata %>%
filter(trial == "1", agegroup =="24mo") %>%
summarise(mage = mean(age)/30.42,
lrange = range(age)[1]/30.42,
urange = range(age)[2]/30.42) %>%
mutate_if(is.numeric, round, 2)
a36 <- child_age <- kdata %>%
filter(trial == "1", agegroup =="36mo", condition != "exp", condition!="obs") %>%
summarise(mage = mean(age)/30.42,
lrange = range(age)[1]/30.42,
urange = range(age)[2]/30.42) %>%
mutate_if(is.numeric, round, 2)
a24[2]
match.natref_ex_obs
xdata=read.csv(file="~/ownCloud/Stats/natref/kids/Reli_NatRef_Child_Data36_obs_exp.txt", header=T, sep="\t")
match.natref_ex_obs=sum(xdata$match)/length(xdata$match)*100
match.natref_ex_obs
match=sum(xdata$match)/length(xdata$match)*100
reli.natref_ex_obs=cbind(xdata$cho,xdata$cho_rel)
kap=kappa2(reli.natref_ex_obs)
library("papaja")
library("lme4")
library("car")
library("irr")
library("psych")
library("ggplot2")
library("ggthemes")
library(broom)
library(tidyverse)
library(langcog)
library("exactRankTests")
source("~/ownCloud/Stats/R_scripts/intercept_optimization.r")
source("~/ownCloud/Stats/R_scripts/diagnostic_fcns.r")
source("~/ownCloud/Stats/R_scripts/glmm_stability.r")
source("~/ownCloud/Stats/R_scripts/helpers.r")
kap=kappa2(reli.natref_ex_obs)
ceo <- kdata %>%
filter(agegroup != "18mo", agegroup != "24mo", condition!="combined") %>%
mutate(trial = scale(trial, center = TRUE, scale=FALSE),
condition = as.factor(condition))
ceom = glmer(score~condition+
(trial|subject),
data=ceo, family=binomial, control=contr)
summary(ceom)
ceo$condition=relevel(ceo$condition, ref="sound")
ceom = glmer(score~condition+
(trial|subject),
data=ceo, family=binomial, control=contr)
summary(ceom)
ceoc <- drop1(ceom, test = "Chisq")
ceoc
str(kdata)
cges <- kdata %>%
filter(agegroup == "36mo", agegroup != "24mo", condition!="combined", condition!="sound") %>%
mutate(trial = scale(trial, center = TRUE, scale=FALSE),
condition = as.factor(condition))
gesm = glmer(score~condition+
(trial|subject),
data=ceo, family=binomial, control=contr)
cges <- drop1(gesm, test = "Chisq")
cges
gesm = glmer(score~condition+
(trial|subject),
data=ges, family=binomial, control=contr)
ges <- kdata %>%
filter(agegroup == "36mo", agegroup != "24mo", condition!="combined", condition!="sound") %>%
mutate(trial = scale(trial, center = TRUE, scale=FALSE),
condition = as.factor(condition))
gesm = glmer(score~condition+
(trial|subject),
data=ges, family=binomial, control=contr)
cges <- drop1(gesm, test = "Chisq")
cges
summary(gesm)
o <-bind_cols(e3m,ft)%>%
select(agegroup, condition,estimate,lci,uci,std.error,p.value,t1_success,t1_p) %>%
knitr::kable(digits = 2, align = "c", caption = "Details for models and trial 1 performance")
o
o <-bind_cols(e3m,ft)%>%
select(agegroup, condition,estimate,std.error,lci,uci,p.value,t1_success,t1_p) %>%
knitr::kable(digits = 2, align = "c", caption = "Details for models and trial 1 performance")
o
aeo <- child_age <- kdata %>%
filter(trial == "1", agegroup =="36mo", condition != "combined", condition!="gesture",condition!="sound") %>%
summarise(mage = mean(age)/30.42,
lrange = range(age)[1]/30.42,
urange = range(age)[2]/30.42) %>%
mutate_if(is.numeric, round, 2)
ceoc <- drop1(ceom, test = "Chisq")
ceoc
ceoc[2,7]
ceoc[2,3]
ceoc[2,1]
ceoc[2,4]
summary(ceom)
summary(ceom)$coefficients[2,1]
cges <- drop1(gesm, test = "Chisq")
cges
load("natref.RData")
boot.resexobs$ci.estimates
library("papaja")
library("lme4")
library("car")
library("irr")
library("psych")
library("ggplot2")
library("ggthemes")
library(broom)
library(tidyverse)
library(langcog)
library("exactRankTests")
source("~/ownCloud/Stats/R_scripts/intercept_optimization.r")
source("~/ownCloud/Stats/R_scripts/diagnostic_fcns.r")
source("~/ownCloud/Stats/R_scripts/glmm_stability.r")
source("~/ownCloud/Stats/R_scripts/helpers.r")
xdata=read.csv(file="~/ownCloud/Stats/natref/kids/Reli_NatRef_Child_Data36_obs_exp.txt", header=T, sep="\t")
match=sum(xdata$match)/length(xdata$match)*100
reli.natref_ex_obs=cbind(xdata$cho,xdata$cho_rel)
kap=kappa2(reli.natref_ex_obs)
round(kap,2)
kap
kap
str(kap)
a24[2]
a24
a24[2,2]
a24[1,2]
version
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(knitr)
library(langcog)
install.packages("devtools")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
devtools::install_github("langcog/langcog")
library(langcog)
library(ggthemes)
install.packages("ggthemes")
library(ggthemes)
install.packages("lme4")
install.packages("papayar")
devtools::install_github("crsh/papaja")
library("papaja", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("brms")
install.packages("rstan")
install.packages("rstan")
library("rstan", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("brms")
library(brms)
install.packages("mvtnorm")
install.packages("brms")
install.packages("igraph")
install.packages("brms")
install.packages("xts")
install.packages("brms")
library("brms", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
devtools::install_github("rasmusab/bayesian_first_aid")
install.packages("rjags")
devtools::install_github("rasmusab/bayesian_first_aid")
library("rjags", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'")
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz")
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz")
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/4/rjags_4-4.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/4/rjags_4-4.tgz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
devtools::install_github("rasmusab/bayesian_first_aid")
devtools::install_github("rasmusab/bayesian_first_aid")
library("rjags", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
devtools::install_github("rasmusab/bayesian_first_aid")
library("rjags", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:rjags", unload=TRUE)
###
library(tidyverse)
library(knitr)
library(langcog)
library(ggthemes)
## importing data
d <- read_csv(file="cue.data.csv") %>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))
summary(bm)
ms <- d %>%
filter(trial == "1") %>%
group_by(condition, id) %>%
summarise(correct = mean(correct)) %>%
multi_boot_standard(col = "correct")
ms
ggplot(ms,
aes(x = condition, y = mean, fill = condition)) +
geom_bar(stat="identity") +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few(base_size = 12) +
ylim(0,1)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_fill_solarized(name="Condition",
breaks=c("look", "lookLabel","point","pointLabel"),
labels=c("Look", "Look + Label","Point","Point + Label"))
summary(bm)
bm <- brm(correct ~ condition +
(condition |id) + (condition |agent),
data = data_inf, family = binomial(),
save_all_pars = TRUE,
iter = 4000)
library(brms)
bm <- brm(correct ~ condition +
(condition |id) + (condition |agent),
data = data_inf, family = binomial(),
save_all_pars = TRUE,
iter = 4000)
data_inf <- d%>%
filter(trial_type == "test")%>%
mutate(trial = scale(as.numeric(trial), center = TRUE, scale=FALSE))
bm <- brm(correct ~ condition +
(condition |id) + (condition |agent),
data = data_inf, family = binomial(),
save_all_pars = TRUE,
iter = 4000)
summary(bm)
bm <- brm(correct ~ condition +
(condition |id) + (condition |agent),
data = data_inf, family = bernoulli(),
save_all_pars = TRUE,
iter = 4000)
summary(bm)
bm <- brm(correct ~ condition +
(condition |id) + (condition |agent),
data = data_inf, family = bernoulli(),
save_all_pars = TRUE,
control = list(adapt_delta = 0.9),
iter = 4000)
summary(bm)
bm <- brm(correct ~ condition +
(condition |id) + (condition |agent),
data = data_inf, family = bernoulli(),
save_all_pars = TRUE,
control = list(adapt_delta = 0.99),
iter = 8000)
summary(bm)
bm <- brm(correct ~ condition +
(condition |id) + (condition |agent),
data = data_inf, family = bernoulli(),
save_all_pars = TRUE,
control = list(adapt_delta = 0.99),
iter = 20000)
summary(bm)
bm2 <- brm(correct ~ condition +
(condition |id) + (condition |agent),
data = data_inf, family = bernoulli(),
save_all_pars = TRUE,
control = list(adapt_delta = 0.80),
iter = 2000)
summary(bm2)
summary(bm)
data_inf <- d%>%
filter(trial_type == "test")%>%
mutate(trial = scale(as.numeric(trial), center = TRUE, scale=FALSE))
data_inf <- d%>%
filter(trial == "1")%>%
mutate(trial = scale(as.numeric(trial), center = TRUE, scale=FALSE))
bm <- brm(correct ~ condition +
(condition |id) + (condition |agent),
data = data_inf, family = bernoulli(),
control = list(adapt_delta = 0.80),
iter = 2000)
summary(bm)
bm <- brm(correct ~ condition +
(1 |agent),
data = data_inf, family = bernoulli(),
control = list(adapt_delta = 0.80),
iter = 2000)
summary(bm)
bm <- brm(correct ~ condition +
(condition |agent),
data = data_inf, family = bernoulli(),
control = list(adapt_delta = 0.80),
iter = 2000)
summary(bm)
120/8
files <- dir("~/Work/CueStrength/cosub_between_look/anonymized-results/")
files <- dir("~/Work/CueStrength/cween_look/anonymized-results/")
files
library(rjson)
library(tidyr)
library(stringr)
library(dplyr)
library(data.table)
library("stringr")
##
setwd("~/Work/CueStrength/git/stats/")
files <- dir("~/Work/CueStrength/cosub_between_look/sandbox-results/")
raw <- data.frame()
for (f in files) {
jf <- paste("~/Work/CueStrength/cosub_between_look/sandbox-results/",f,sep="")
jf <- paste("~/Work/CueStrength/cosub_between_lookLabel/sandbox-results/",f,sep="")
jf <- paste("~/Work/CueStrength/cosub_between_point/sandbox-results/",f,sep="")
jf <- paste("~/Work/CueStrength/cosub_between_pointLabel/sandbox-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- data.frame(workerid = jd$WorkerId,
data = jd$answers$data$data
)
raw <- bind_rows(raw, id)
}
library(rjson)
install.packages("rjson")
install.packages("tidyr")
install.packages("stringr")
install.packages("dplyr")
install.packages("data.table")
library(rjson)
library(tidyr)
library(stringr)
library(dplyr)
library(data.table)
files <- dir("~/Work/CueStrength/cosub_between_look/sandbox-results/")
raw <- data.frame()
for (f in files) {
jf <- paste("~/Work/CueStrength/cosub_between_look/sandbox-results/",f,sep="")
#  jf <- paste("~/Work/CueStrength/cosub_between_lookLabel/sandbox-results/",f,sep="")
#  jf <- paste("~/Work/CueStrength/cosub_between_point/sandbox-results/",f,sep="")
#  jf <- paste("~/Work/CueStrength/cosub_between_pointLabel/sandbox-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- data.frame(workerid = jd$WorkerId,
data = jd$answers$data$data
)
raw <- bind_rows(raw, id)
}
inf.data= melt(setDT(raw), measure = patterns( "^data.experiment","^data.cond","^data.agent","^data.leftFruit","^data.rightFruit","^data.tablePositionCorr","^data.pick","^data.inf","^data.trial","^data.rt", "^data.correct"))
names(inf.data) = c("id","alltrial","experiment","condition","agent","leftObject","rightObject","targetOnTable","pick","target","trial","rt","correct")
# check per con   inf.data $pick= str_sub(inf.data $pick,60,str_length(inf.data $pick)-4)
inf.data = inf.data[!duplicated(inf.data), ]
inf.data = inf.data[order(id)]
inf.data $id = paste(inf.data $id, inf.data $condition,sep="_")
inf.data$trial[inf.data$trial=="train1"]="train"
inf.data$trial[inf.data$trial=="train2"]="train"
# check resulting datafile
inf.data
inf.data $pick= str_sub(inf.data $pick,60,str_length(inf.data $pick)-4)
inf.data
files <- dir("~/Work/CueStrength/cosub_between_point/sandbox-results/")
#combine files into one dataframe
raw <- data.frame()
for (f in files) {
#  jf <- paste("~/Work/CueStrength/cosub_between_look/sandbox-results/",f,sep="")
jf <- paste("~/Work/CueStrength/cosub_between_lookLabel/sandbox-results/",f,sep="")
#  jf <- paste("~/Work/CueStrength/cosub_between_point/sandbox-results/",f,sep="")
#  jf <- paste("~/Work/CueStrength/cosub_between_pointLabel/sandbox-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- data.frame(workerid = jd$WorkerId,
data = jd$answers$data$data
)
raw <- bind_rows(raw, id)
}
#combine files into one dataframe
raw <- data.frame()
for (f in files) {
#  jf <- paste("~/Work/CueStrength/cosub_between_look/sandbox-results/",f,sep="")
#  jf <- paste("~/Work/CueStrength/cosub_between_lookLabel/sandbox-results/",f,sep="")
jf <- paste("~/Work/CueStrength/cosub_between_point/sandbox-results/",f,sep="")
#  jf <- paste("~/Work/CueStrength/cosub_between_pointLabel/sandbox-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- data.frame(workerid = jd$WorkerId,
data = jd$answers$data$data
)
raw <- bind_rows(raw, id)
}
# convert into short format, drop unnecessary columns, rename variables and sort by id
inf.data= melt(setDT(raw), measure = patterns( "^data.experiment","^data.cond","^data.agent","^data.leftFruit","^data.rightFruit","^data.tablePositionCorr","^data.pick","^data.inf","^data.trial","^data.rt", "^data.correct"))
names(inf.data) = c("id","alltrial","experiment","condition","agent","leftObject","rightObject","targetOnTable","pick","target","trial","rt","correct")
# look
inf.data $pick= str_sub(inf.data $pick,61,str_length(inf.data $pick)-4)
inf.data $pick= str_sub(inf.data $pick,61,str_length(inf.data $pick)-4)
inf.data $pick= str_sub(inf.data $pick,61,str_length(inf.data $pick)-4)
inf.data = inf.data[!duplicated(inf.data), ]
inf.data = inf.data[order(id)]
inf.data $id = paste(inf.data $id, inf.data $condition,sep="_")
inf.data$trial[inf.data$trial=="train1"]="train"
inf.data$trial[inf.data$trial=="train2"]="train"
inf.data
inf.data= melt(setDT(raw), measure = patterns( "^data.experiment","^data.cond","^data.agent","^data.leftFruit","^data.rightFruit","^data.tablePositionCorr","^data.pick","^data.inf","^data.trial","^data.rt", "^data.correct"))
names(inf.data) = c("id","alltrial","experiment","condition","agent","leftObject","rightObject","targetOnTable","pick","target","trial","rt","correct")
# look
inf.data $pick= str_sub(inf.data $pick,61,str_length(inf.data $pick)-4)
inf.data = inf.data[!duplicated(inf.data), ]
inf.data = inf.data[order(id)]
inf.data $id = paste(inf.data $id, inf.data $condition,sep="_")
inf.data$trial[inf.data$trial=="train1"]="train"
inf.data$trial[inf.data$trial=="train2"]="train"
inf.data
files <- dir("~/Work/CueStrength/cosub_between_lookLabel/sandbox-results/")
jf <- paste("~/Work/CueStrength/cosub_between_lookLabel/sandbox-results/",f,sep="")
raw <- data.frame()
for (f in files) {
#  jf <- paste("~/Work/CueStrength/cosub_between_look/sandbox-results/",f,sep="")
jf <- paste("~/Work/CueStrength/cosub_between_lookLabel/sandbox-results/",f,sep="")
#  jf <- paste("~/Work/CueStrength/cosub_between_point/sandbox-results/",f,sep="")
#  jf <- paste("~/Work/CueStrength/cosub_between_pointLabel/sandbox-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- data.frame(workerid = jd$WorkerId,
data = jd$answers$data$data
)
raw <- bind_rows(raw, id)
}
inf.data= melt(setDT(raw), measure = patterns( "^data.experiment","^data.cond","^data.agent","^data.leftFruit","^data.rightFruit","^data.tablePositionCorr","^data.pick","^data.inf","^data.trial","^data.rt", "^data.correct"))
names(inf.data) = c("id","alltrial","experiment","condition","agent","leftObject","rightObject","targetOnTable","pick","target","trial","rt","correct")
# remove file path for picked object
inf.data $pick= str_sub(inf.data $pick,66,str_length(inf.data $pick)-4)
inf.data = inf.data[!duplicated(inf.data), ]
inf.data = inf.data[order(id)]
inf.data $id = paste(inf.data $id, inf.data $condition,sep="_")
inf.data$trial[inf.data$trial=="train1"]="train"
inf.data$trial[inf.data$trial=="train2"]="train"
inf.data
inf.data= melt(setDT(raw), measure = patterns( "^data.experiment","^data.cond","^data.agent","^data.leftFruit","^data.rightFruit","^data.tablePositionCorr","^data.pick","^data.inf","^data.trial","^data.rt", "^data.correct"))
names(inf.data) = c("id","alltrial","experiment","condition","agent","leftObject","rightObject","targetOnTable","pick","target","trial","rt","correct")
# remove file path for picked object
# look & point
inf.data
inf.data $pick= str_sub(inf.data $pick,61,str_length(inf.data $pick)-4)
inf.data
files <- dir("~/Work/CueStrength/cosub_between_pointLabel/sandbox-results/")
raw <- data.frame()
for (f in files) {
#  jf <- paste("~/Work/CueStrength/cosub_between_look/sandbox-results/",f,sep="")
#  jf <- paste("~/Work/CueStrength/cosub_between_lookLabel/sandbox-results/",f,sep="")
#  jf <- paste("~/Work/CueStrength/cosub_between_point/sandbox-results/",f,sep="")
jf <- paste("~/Work/CueStrength/cosub_between_pointLabel/sandbox-results/",f,sep="")
jd <- fromJSON(paste(readLines(jf), collapse=""))
id <- data.frame(workerid = jd$WorkerId,
data = jd$answers$data$data
)
raw <- bind_rows(raw, id)
}
inf.data= melt(setDT(raw), measure = patterns( "^data.experiment","^data.cond","^data.agent","^data.leftFruit","^data.rightFruit","^data.tablePositionCorr","^data.pick","^data.inf","^data.trial","^data.rt", "^data.correct"))
names(inf.data) = c("id","alltrial","experiment","condition","agent","leftObject","rightObject","targetOnTable","pick","target","trial","rt","correct")
# remove file path for picked object
inf.data $pick= str_sub(inf.data $pick,61,str_length(inf.data $pick)-4)
#
inf.data = inf.data[!duplicated(inf.data), ]
inf.data = inf.data[order(id)]
inf.data $id = paste(inf.data $id, inf.data $condition,sep="_")
inf.data$trial[inf.data$trial=="train1"]="train"
inf.data$trial[inf.data$trial=="train2"]="train"
# check resulting datafile
inf.data
15*8
