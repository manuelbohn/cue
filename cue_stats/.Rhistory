mutate(phase = ifelse(control == "test", "Cue Types", "Epistemic Control")) %>%
mutate(design = ifelse(experiment == "cue_strength_controls" | experiment == "cue_strength_controls_replication" | experiment == "cue_strength_within" , "Within", "Between"),
condition2 = condition)
d2 <- bind_rows(read_csv(file="cue_unintentional_bell.data.csv"),
read_csv(file="cue_unintentional_person.data.csv"),
read_csv(file="cue_unintentional_tornado.data.csv"))%>%
mutate(trial_type = ifelse(trial == "train", "train", "test"),
condition = ifelse(control == "no",condition, ifelse(experiment == "cue_strength_unintentional_tornado", "tornado", ifelse(experiment == "cue_strength_unintentional_person", "person", "bell"))),
phase = "Intentional Control",
design = "Within") %>%
mutate(condition2 = paste(experiment,control,sep="_"))
d3 <- bind_rows(read_csv(file="cue_unintentional_tornado_between.data.csv"),
read_csv(file="cue_unintentional_between.data.csv"))%>%
mutate(trial_type = ifelse(trial == "train", "train", "test"),
condition = ifelse(control == "no","lookLabel","tornado"),
phase = "Intentional Control",
design = "Between") %>%
mutate(condition2 = ifelse(control == "no", "cue_strength_unintentional_tornado_no","cue_strength_unintentional_tornado_yes"))
d <- bind_rows(d1,d2,d3)
# exclude those who did both experiments
# keep first time they participated
d <- d %>%
distinct(id, alltrial, .keep_all = TRUE)
# check number of subjects per experiment
d %>%
filter(trial_type == "test") %>%
group_by(condition2, design ,phase) %>%
summarise(n = length(unique(id)))
ms <- d %>%
filter(trial_type == "test") %>%
group_by(condition ,design, id) %>%
summarise(correct = mean(correct))
ms2 <- ms %>%
multi_boot_standard(col = "correct")
ggplot() +
geom_jitter(data = ms, aes(x = condition, y = correct, col = condition, alpha = .2), width = .2,height = .015)+
geom_pointrange(data = ms2,aes(x = condition, y = mean, col = condition,ymin = ci_lower, ymax = ci_upper),
position = position_dodge(width = .5), size = 1)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
facet_grid( design ~ . , scales = "free_x", space = "free_x" ) +
theme_few(base_size = 12) +
ylim(-0.05,1.05)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
guides(alpha = F)+
scale_color_solarized(name="Condition",
breaks=c("abs", "bar","look", "lookLabel","point", "pointLabel"),
labels=c("Control - Later", "Control - Barrier","Test - Look", "Test - Look + Label", "Test - Point", "Test - Point + Label"))
ms <- d %>%
filter(trial_type == "test") %>%
group_by(condition ,design, id) %>%
summarise(correct = mean(correct)) %>%
multi_boot_standard(col = "correct")
ggplot(ms,
aes(x = condition, y = mean, fill = condition)) +
geom_bar(stat="identity") +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
facet_grid( design ~ . , scales = "free_x", space = "free_x" ) +
theme_few(base_size = 12) +
ylim(0,1)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_fill_solarized(name="Condition",
breaks=c("abs", "bar","look", "lookLabel","point", "pointLabel"),
labels=c("Control - Later", "Control - Barrier","Test - Look", "Test - Look + Label", "Test - Point", "Test - Point + Label"))
ms <- d %>%
filter(trial_type == "test") %>%
group_by(condition, phase ,design, id) %>%
summarise(correct = mean(correct)) %>%
multi_boot_standard(col = "correct")
ggplot(ms,
aes(x = condition, y = mean, fill = condition)) +
geom_bar(stat="identity") +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
facet_grid(design ~ phase, scales = "free_x", space = "free_x" ) +
theme_few(base_size = 12) +
ylim(0,1)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_fill_solarized(name="Condition",
breaks=c("abs", "bar","look", "lookLabel","point", "pointLabel"),
labels=c("Control - Later", "Control - Barrier","Test - Look", "Test - Look + Label", "Test - Point", "Test - Point + Label"))
ggplot(ms,
aes(x = condition, y = mean, fill = condition)) +
geom_bar(stat="identity") +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
facet_grid(design ~ phase, scales = "free_x", space = "free_x" ) +
theme_few(base_size = 12) +
ylim(0,1)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_fill_viridis(name="Condition",
breaks=c("abs", "bar","look", "lookLabel","point", "pointLabel"),
labels=c("Control - Later", "Control - Barrier","Test - Look", "Test - Look + Label", "Test - Point", "Test - Point + Label"))
ggplot(ms,
aes(x = condition, y = mean, fill = condition)) +
geom_bar(stat="identity") +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
facet_grid(design ~ phase, scales = "free_x", space = "free_x" ) +
theme_few(base_size = 12) +
ylim(0,1)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_fill_viridis(name="Condition",
breaks=c("abs", "bar","look", "lookLabel","point", "pointLabel"),
labels=c("Control - Later", "Control - Barrier","Test - Look", "Test - Look + Label", "Test - Point", "Test - Point + Label"), discrete = T)
ggplot(ms,
aes(x = condition2, y = mean, fill = condition)) +
geom_bar(stat="identity") +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
facet_grid(design ~ phase , scales = "free_x", space = "free_x" ) +
theme_few(base_size = 12) +
ylim(-0.05,1.05)+
ggtitle("Excluding subjects who participated more than once")+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
guides(alpha = F)+
scale_color_viridis(name="Condition",
breaks=c("look", "lookLabel","point", "pointLabel","abs", "bar","bell","person","tornado"),
labels=c("Test - Look", "Test - Look + Label", "Test - Point", "Test - Point + Label","Control - Later", "Control - Barrier", "Control - Bell", "Control - Person", "Control - Tornado"), discrete = TRUE)
ms <- d %>%
filter(trial_type == "test") %>%
mutate(design = relevel(as.factor(design), ref = "Within")) %>%
group_by(condition2,condition, design ,phase, id) %>%
summarise(correct = mean(correct))
ms2 <- ms %>%
multi_boot_standard(col = "correct")
ggplot(ms,
aes(x = condition2, y = mean, fill = condition)) +
geom_bar(stat="identity") +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
facet_grid(design ~ phase , scales = "free_x", space = "free_x" ) +
theme_few(base_size = 12) +
ylim(-0.05,1.05)+
ggtitle("Excluding subjects who participated more than once")+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
guides(alpha = F)+
scale_color_viridis(name="Condition",
breaks=c("look", "lookLabel","point", "pointLabel","abs", "bar","bell","person","tornado"),
labels=c("Test - Look", "Test - Look + Label", "Test - Point", "Test - Point + Label","Control - Later", "Control - Barrier", "Control - Bell", "Control - Person", "Control - Tornado"), discrete = TRUE)
ms <- d %>%
filter(trial_type == "test") %>%
mutate(design = relevel(as.factor(design), ref = "Within")) %>%
group_by(condition2,condition, design ,phase, id) %>%
summarise(correct = mean(correct))
ms2 <- ms %>%
multi_boot_standard(col = "correct")
ggplot() +
geom_jitter(data = ms, aes(x = condition2, y = correct, col = condition, alpha = .2), width = .2,height = .015)+
geom_pointrange(data = ms2,aes(x = condition2, y = mean, col = condition,ymin = ci_lower, ymax = ci_upper), size = 1)+
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
facet_grid(design ~ phase , scales = "free_x", space = "free_x" ) +
theme_few(base_size = 12) +
ylim(-0.05,1.05)+
ggtitle("Excluding subjects who participated more than once")+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
guides(alpha = F)+
scale_color_viridis(name="Condition",
breaks=c("look", "lookLabel","point", "pointLabel","abs", "bar","bell","person","tornado"),
labels=c("Test - Look", "Test - Look + Label", "Test - Point", "Test - Point + Label","Control - Later", "Control - Barrier", "Control - Bell", "Control - Person", "Control - Tornado"), discrete = TRUE)
ggplot(ms,
aes(x = condition2, y = mean, fill = condition2)) +
geom_bar(stat="identity") +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
facet_grid(design ~ phase , scales = "free_x", space = "free_x" ) +
theme_few(base_size = 12) +
ylim(-0.05,1.05)+
ggtitle("Excluding subjects who participated more than once")+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
guides(alpha = F)+
scale_color_viridis(name="Condition",
breaks=c("look", "lookLabel","point", "pointLabel","abs", "bar","bell","person","tornado"),
labels=c("Test - Look", "Test - Look + Label", "Test - Point", "Test - Point + Label","Control - Later", "Control - Barrier", "Control - Bell", "Control - Person", "Control - Tornado"), discrete = TRUE)
ggplot(ms2,
aes(x = condition2, y = mean, fill = condition)) +
geom_bar(stat="identity") +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
facet_grid(design ~ phase , scales = "free_x", space = "free_x" ) +
theme_few(base_size = 12) +
ylim(-0.05,1.05)+
ggtitle("Excluding subjects who participated more than once")+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
guides(alpha = F)+
scale_color_viridis(name="Condition",
breaks=c("look", "lookLabel","point", "pointLabel","abs", "bar","bell","person","tornado"),
labels=c("Test - Look", "Test - Look + Label", "Test - Point", "Test - Point + Label","Control - Later", "Control - Barrier", "Control - Bell", "Control - Person", "Control - Tornado"), discrete = TRUE)
d <- read_csv(file="cue.data.csv") %>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))
###
library(tidyverse)
library(knitr)
library(langcog)
library(ggthemes)
## importing data
d <- read_csv(file="cue.data.csv") %>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))
## importing data
d <- read_csv(file="cue.data.csv") %>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))
d <- read_csv(file="cue.within.data.csv") %>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))
d <- read_csv(file="cue_within.data.csv") %>%
mutate(trial_type = ifelse(trial == "train", "train", "test"))
d %>%
group_by(trial_type) %>%
summarise(n = length(unique(id)),
correct = mean(correct)) %>%
knitr::kable(digits = 3)
ms <- d %>%
filter(trial_type == "test") %>%
group_by(condition, id) %>%
summarise(correct = mean(correct)) %>%
multi_boot_standard(col = "correct")
ms <- d %>%
filter(trial_type == "test") %>%
group_by(condition, id) %>%
summarise(correct = mean(correct)) %>%
multi_boot_standard(col = "correct")
ggplot(ms,
aes(x = condition, y = mean, fill = condition)) +
geom_bar(stat="identity") +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) +
geom_hline(yintercept = 0.5, lty=2)+
labs(x="",y="Proportion Expected Choice")+
theme_few(base_size = 12) +
ylim(0,1)+
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
scale_fill_solarized(name="Condition",
breaks=c("look", "lookLabel","point","pointLabel"),
labels=c("Look", "Look + Label","Point","Point + Label"))
library(brms)
library("shinystan", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("shiny")
library("shinystan", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(brms)
library("shinystan", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(brms)
install.packages("shiny")
install.packages("shiny")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(brms)
data_inf <- d%>%
filter(trial == "test")%>%
mutate(trial = scale(as.numeric(trial), center = TRUE, scale=FALSE))
bm <- brm(correct ~ condition +
(condition |id) + (condition |agent),
data = data_inf, family = bernoulli(),
control = list(adapt_delta = 0.80),
iter = 2000)
d
data_inf <- d%>%
filter(trial == "test")
data_inf
d
data_inf <- d%>%
filter(trial_type == "test")
data_inf
bm <- brm(correct ~ condition +
(condition |id) + (condition |agent),
data = data_inf, family = bernoulli(),
control = list(adapt_delta = 0.80),
iter = 2000)
summary(bm)
bm <- brm(correct ~ condition +
(condition |id) + (condition |agent),
data = data_inf, family = bernoulli(),
control = list(adapt_delta = 0.80),
sample_prior = T,
iter = 2000)
summary(bm)
hypothesis(bm, "conditionlookLabel - conditionpoint = 0")
a <- hypothesis(bm, "conditionlookLabel - conditionpoint = 0")
plot(a)
a <- hypothesis(bm, "conditionlookLabel - conditionpoint = 0",alpha = 0.05)
plot(a)
a
a <- hypothesis(bm, "conditionlookLabel = conditionpoint",alpha = 0.05)
plot(a)
a
a <- hypothesis(bm, "conditionlookLabel = conditionpoint",alpha = 0.01)
a
a <- hypothesis(bm, "conditionlookLabel = conditionpoint",alpha = 0.05)
a <- hypothesis(bm, "conditionlookLabel > conditionpoint",alpha = 0.05)
a
plot(a)
a <- hypothesis(bm, "conditionlookLabel < conditionpoint",alpha = 0.05)
plot(a)
a
a
a
plot(a)
a <- hypothesis(bm, "conditionlookLabel = conditionpoint = conditionpointLabel",alpha = 0.05)
a <- hypothesis(bm, "conditionlookLabel + conditionpoint + conditionpointLabel - 3 = 0",alpha = 0.05)
a
a <- hypothesis(bm, "conditionlookLabel + conditionpoint + conditionpointLabel - 3 > 0",alpha = 0.05)
a
a <- hypothesis(bm, "conditionlookLabel + conditionpoint + conditionpointLabel + conditionlook - 4 > 0",alpha = 0.05)
a <- hypothesis(bm, "Intercept + conditionlookLabel + conditionpoint + conditionpointLabel + conditionlook - 4 > 0",alpha = 0.05)
a <- hypothesis(bm, "Intercept + conditionlookLabel + conditionpoint + conditionpointLabel - 4 > 0",alpha = 0.05)
plot(a)
a
a <- hypothesis(bm, "Intercept = conditionlookLabel",alpha = 0.05)
a
h <- c("conditionlookLabel - conditionpoint > 0 ","conditionpointLabel - conditionlookLabel > 0","conditionpointLabel - conditionpoint > 0")
a <- hypothesis(bm, h,alpha = 0.05)
a
plot(a)
plot(a, xlim = c(-5,5))
?plot
Brobs::plot(a, xlim = c(-5,5))
Brobdingnag::plot(a, xlim = c(-5,5))
graphics::plot(a)
plot(a,xlim=c(1, 10))
plot(a)+
xlim(-5,5)
plot(a)+
ggplot2::xlim(-5,5)
plot(a)+
ggplot2::ylim(-5,5)
plot(a)+
ggplot2::ylim(0,5)
plot(a)+
ggplot2::themes_few()
plot(a)+
ggplot2:themes_few()
plot(a)+
ggplot::themes_few()
plot(a)[[1]] + ggplot2::ylim(0, 1000)
plot(a)[[1]] + ggplot2::xlim(-5, 5)
plot(a) + ggplot2::xlim(-5, 5)
plot(a)[[1]]
plot(a)[[1]] + ggplot2::xlim(-5, 5)
a
null <- brm(correct ~ 1 +
(condition |id) + (condition |agent),
data = data_inf, family = bernoulli(),
save_all_pars = TRUE,
iter = 2000)
null
bm
bf <- bayes_factor(bm, null)
?bayes_factor
bf <- brms::bayes_factor(bm, null)
brms::bayes_factor(bm, null)
bm <- brm(correct ~ condition +
(condition |id) + (condition |agent),
data = data_inf, family = bernoulli(),
control = list(adapt_delta = 0.80),
save_all_pars = TRUE,
sample_prior = T,
iter = 2000)
bm2 <- brm(correct ~ condition +
(condition |id) + (condition |agent),
data = data_inf, family = bernoulli(),
control = list(adapt_delta = 0.80),
save_all_pars = TRUE,
sample_prior = F,
iter = 2000)
full <- bm2
brms::bayes_factor(full, null, log = F)
brms::bayes_factor(full, null, log = F,repetitions = 3, maxiter = 2000)
brms::bayes_factor(full, null, log = F,repetitions = 3, maxiter = 2000)
install.packages("bridgesampling")
bf(full, null)
bridgesampling::bf(full, null)
bridgesampling::bf(full, null, log = FALSE)
p <- plot(a, plot = F, theme = theme_get())[[1]]
p
p+
xlim(-5,5)
p +
xlim(-5,5)+
themes_few()
library(ggthemes)
p +
xlim(-5,5)+
themes_few()
library(ggthemes)
p +
xlim(-5,5)+
theme_few()
?hypothesis
a
p
p
p +
xlim(-5,5)+
theme_few()
h <- c("conditionlookLabel = conditionpoint ","conditionpointLabel = conditionlookLabel","conditionpointLabel = conditionpoint ")
a <- hypothesis(bm, h,alpha = 0.05)
p <- plot(a, plot = F, theme = theme_get())[[1]]
p +
xlim(-5,5)+
theme_few()
a
bayes_factor(full, null, log = FALSE, maxiter = 5000)
bayes_factor(full, null, log = FALSE, maxiter = 5000)
bayes_factor(full, null, log = FALSE, maxiter = 10000)
a <- brmshypothesis(bm, h,alpha = 0.05)
?get_prior
prior <- get_prior(correct ~ condition +
(condition |id) + (condition |agent),
data = data_inf, family = bernoulli())
prior
bm
str(bm)
bm$cov_ranef
bm$fit
summary(bm)
bm <- brm(correct ~ condition +
(condition |id) + (condition |agent),
data = data_inf, family = bernoulli(),
control = list(adapt_delta = 0.80),
save_all_pars = TRUE,
sample_prior = T,
prior = prior,
iter = 2000)
summary(bm)
h <- c("conditionlookLabel - conditionpoint > 0 ","conditionpointLabel - conditionlookLabel > 0","conditionpointLabel - conditionpoint > 0")
a <- brmshypothesis(bm, h,alpha = 0.05)
a <- hypothesis(bm, h,alpha = 0.05)
a
h <- c("conditionlookLabel = conditionpoint ","conditionpointLabel - conditionlookLabel > 0","conditionpointLabel - conditionpoint > 0")
a <- hypothesis(bm, h,alpha = 0.05)
a
h <- c("conditionlookLabel - conditionpoint > 0 ","conditionpointLabel - conditionlookLabel > 0","conditionpointLabel - conditionpoint > 0")
a <- hypothesis(bm, h,alpha = 0.05)
p <- plot(a, plot = F, theme = theme_get())[[1]]
p +
xlim(-5,5)+
theme_few()
full <- brm(correct ~ condition +
(condition |id) + (condition |agent),
data = data_inf, family = bernoulli(),
control = list(adapt_delta = 0.80),
save_all_pars = TRUE,
sample_prior = F,
prior = prior,
iter = 2000)
null <- brm(correct ~ 1 +
(condition |id) + (condition |agent),
data = data_inf, family = bernoulli(),
save_all_pars = TRUE,
sample_prior = F,
prior = prior,
iter = 2000)
prior2 <- get_prior(correct ~ 1 +
(condition |id) + (condition |agent),
data = data_inf, family = bernoulli())
null <- brm(correct ~ 1 +
(condition |id) + (condition |agent),
data = data_inf, family = bernoulli(),
control = list(adapt_delta = 0.90),
save_all_pars = TRUE,
sample_prior = F,
prior = prior2,
iter = 2000)
bayes_factor(full, null, log = FALSE, maxiter = 1000)
bf1 <- bayes_factor(full, null, log = FALSE, maxiter = 1000)
bf1
bf2 <- bayes_factor(full, null, log = FALSE, maxiter = 1000)
bf2
bf1
bf1 <- bayes_factor(full, null, log = FALSE, maxiter = 1000)
bf2 <- bayes_factor(full, null, log = FALSE, maxiter = 1000)
bf3 <- bayes_factor(full, null, log = FALSE, maxiter = 1000)
bf4 <- bayes_factor(full, null, log = FALSE, maxiter = 1000)
bf5 <- bayes_factor(full, null, log = FALSE, maxiter = 1000)
bf <- rep(bayes_factor(full, null, log = FALSE, maxiter = 1000),10)
bf
for(n in 1:10){
bf = bayes_factor(full, null, log = FALSE, maxiter = 1000)
n = n
}
bf <- for(n in 1:3){
bf = bayes_factor(full, null, log = FALSE, maxiter = 10)
n = n
}
bf
bf <- for(n in 1:2){
bf = bayes_factor(full, null, log = FALSE, maxiter = 1000)
n = n
}
bf
n <-(1:2)
bf <- sapply(n,bayes_factor(full, null, log = FALSE, maxiter = 10))
bf
bf <- c()
bf <- for(n in 1:2){
bf = bayes_factor(full, null, log = FALSE, maxiter = 10)
}
bf
bf <- for(i in 1:2){
bf[i] = bayes_factor(full, null, log = FALSE, maxiter = 10)
}
bf
c(bf1,bf2,bf3,bf4)
c(bf1,bf2,bf3,bf4,bf5)
c(bf1$bf,bf2$bf,bf3$bf,bf4$bf,bf$bf5)
c(bf1$bf,bf2$bf,bf3$bf,bf4$bf,bf5$bf)
